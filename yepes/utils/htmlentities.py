# -*- coding:utf-8 -*-

from __future__ import unicode_literals

import re

from django.utils.encoding import force_text
from django.utils.six import unichr as chr

__all__ = ('decode', 'encode')


CHARACTERS_RE = re.compile(r"[^\s!-%'-;=?-~]")  # Matches '&', '<', '>' and all non-ASCII characters.
CHARACTERS_TO_ENTITIES = {
    'À': '&Agrave;',
    'Á': '&Aacute;',
    'Â': '&Acirc;',
    'Ã': '&Atilde;',
    'Ä': '&Auml;',
    'Å': '&Aring;',
    'Æ': '&AElig;',
    'Ç': '&Ccedil;',
    'È': '&Egrave;',
    'É': '&Eacute;',
    'Ê': '&Ecirc;',
    'Ë': '&Euml;',
    'Ì': '&Igrave;',
    'Í': '&Iacute;',
    'Î': '&Icirc;',
    'Ï': '&Iuml;',
    'Ð': '&ETH;',
    'Ñ': '&Ntilde;',
    'Ò': '&Ograve;',
    'Ó': '&Oacute;',
    'Ô': '&Ocirc;',
    'Õ': '&Otilde;',
    'Ö': '&Ouml;',
    'Ø': '&Oslash;',
    'Ù': '&Ugrave;',
    'Ú': '&Uacute;',
    'Û': '&Ucirc;',
    'Ü': '&Uuml;',
    'Ý': '&Yacute;',
    'Þ': '&THORN;',
    'ß': '&szlig;',
    'à': '&agrave;',
    'á': '&aacute;',
    'â': '&acirc;',
    'ã': '&atilde;',
    'ä': '&auml;',
    'å': '&aring;',
    'æ': '&aelig;',
    'ç': '&ccedil;',
    'è': '&egrave;',
    'é': '&eacute;',
    'ê': '&ecirc;',
    'ë': '&euml;',
    'ì': '&igrave;',
    'í': '&iacute;',
    'î': '&icirc;',
    'ï': '&iuml;',
    'ð': '&eth;',
    'ñ': '&ntilde;',
    'ò': '&ograve;',
    'ó': '&oacute;',
    'ô': '&ocirc;',
    'õ': '&otilde;',
    'ö': '&ouml;',
    'ø': '&oslash;',
    'ù': '&ugrave;',
    'ú': '&uacute;',
    'û': '&ucirc;',
    'ü': '&uuml;',
    'ý': '&yacute;',
    'þ': '&thorn;',
    'ÿ': '&yuml;',
    'Œ': '&OElig;',
    'œ': '&oelig;',
    'Š': '&Scaron;',
    'š': '&scaron;',
    'Ÿ': '&Yuml;',
    'Α': '&Alpha;',
    'Β': '&Beta;',
    'Γ': '&Gamma;',
    'Δ': '&Delta;',
    'Ε': '&Epsilon;',
    'Ζ': '&Zeta;',
    'Η': '&Eta;',
    'Θ': '&Theta;',
    'Ι': '&Iota;',
    'Κ': '&Kappa;',
    'Λ': '&Lambda;',
    'Μ': '&Mu;',
    'Ν': '&Nu;',
    'Ξ': '&Xi;',
    'Ο': '&Omicron;',
    'Π': '&Pi;',
    'Ρ': '&Rho;',
    'Σ': '&Sigma;',
    'Τ': '&Tau;',
    'Υ': '&Upsilon;',
    'Φ': '&Phi;',
    'Χ': '&Chi;',
    'Ψ': '&Psi;',
    'Ω': '&Omega;',
    'α': '&alpha;',
    'β': '&beta;',
    'γ': '&gamma;',
    'δ': '&delta;',
    'ε': '&epsilon;',
    'ζ': '&zeta;',
    'η': '&eta;',
    'θ': '&theta;',
    'ι': '&iota;',
    'κ': '&kappa;',
    'λ': '&lambda;',
    'μ': '&mu;',
    'ν': '&nu;',
    'ξ': '&xi;',
    'ο': '&omicron;',
    'π': '&pi;',
    'ρ': '&rho;',
    'ς': '&sigmaf;',
    'σ': '&sigma;',
    'τ': '&tau;',
    'υ': '&upsilon;',
    'φ': '&phi;',
    'χ': '&chi;',
    'ψ': '&psi;',
    'ω': '&omega;',
    'ϑ': '&thetasym;',
    'ϒ': '&upsih;',
    'ϖ': '&piv;',
    '¡': '&iexcl;',
    '&': '&amp;',
    '¢': '&cent;',
    '£': '&pound;',
    '¤': '&curren;',
    '¥': '&yen;',
    '¦': '&brvbar;',
    '§': '&sect;',
    '¨': '&uml;',
    '©': '&copy;',
    'ª': '&ordf;',
    '«': '&laquo;',
    '¬': '&not;',
    '®': '&reg;',
    '¯': '&macr;',
    '°': '&deg;',
    '±': '&plusmn;',
    '²': '&sup2;',
    '³': '&sup3;',
    '´': '&acute;',
    'µ': '&micro;',
    '¶': '&para;',
    '·': '&middot;',
    '¸': '&cedil;',
    '¹': '&sup1;',
    'º': '&ordm;',
    '»': '&raquo;',
    '¼': '&frac14;',
    '½': '&frac12;',
    '¾': '&frac34;',
    '¿': '&iquest;',
    '×': '&times;',
    '÷': '&divide;',
    'ƒ': '&fnof;',
    'ˆ': '&circ;',
    '˜': '&tilde;',
    '–': '&ndash;',
    '—': '&mdash;',
    '‘': '&lsquo;',
    '’': '&rsquo;',
    '‚': '&sbquo;',
    '“': '&ldquo;',
    '”': '&rdquo;',
    '„': '&bdquo;',
    '†': '&dagger;',
    '‡': '&Dagger;',
    '•': '&bull;',
    '…': '&hellip;',
    '‰': '&permil;',
    '′': '&prime;',
    '″': '&Prime;',
    '‹': '&lsaquo;',
    '›': '&rsaquo;',
    '‾': '&oline;',
    '⁄': '&frasl;',
    '€': '&euro;',
    'ℑ': '&image;',
    '℘': '&weierp;',
    'ℜ': '&real;',
    '™': '&trade;',
    'ℵ': '&alefsym;',
    '←': '&larr;',
    '↑': '&uarr;',
    '→': '&rarr;',
    '↓': '&darr;',
    '↔': '&harr;',
    '↵': '&crarr;',
    '⇐': '&lArr;',
    '⇑': '&uArr;',
    '⇒': '&rArr;',
    '⇓': '&dArr;',
    '⇔': '&hArr;',
    '∀': '&forall;',
    '∂': '&part;',
    '∃': '&exist;',
    '∅': '&empty;',
    '∇': '&nabla;',
    '∈': '&isin;',
    '∉': '&notin;',
    '∋': '&ni;',
    '∏': '&prod;',
    '∑': '&sum;',
    '−': '&minus;',
    '∗': '&lowast;',
    '√': '&radic;',
    '∝': '&prop;',
    '∞': '&infin;',
    '∠': '&ang;',
    '∧': '&and;',
    '∨': '&or;',
    '∩': '&cap;',
    '∪': '&cup;',
    '∫': '&int;',
    '∴': '&there4;',
    '∼': '&sim;',
    '≅': '&cong;',
    '≈': '&asymp;',
    '≠': '&ne;',
    '≡': '&equiv;',
    '≤': '&le;',
    '<': '&lt;',
    '≥': '&ge;',
    '>': '&gt;',
    '⊂': '&sub;',
    '⊃': '&sup;',
    '⊄': '&nsub;',
    '⊆': '&sube;',
    '⊇': '&supe;',
    '⊕': '&oplus;',
    '⊗': '&otimes;',
    '⊥': '&perp;',
    '⋅': '&sdot;',
    '⌈': '&lceil;',
    '⌉': '&rceil;',
    '⌊': '&lfloor;',
    '⌋': '&rfloor;',
    '〈': '&lang;',
    '〉': '&rang;',
    '◊': '&loz;',
    '♠': '&spades;',
    '♣': '&clubs;',
    '♥': '&hearts;',
    '♦': '&diams;',
}
def CHARACTERS_REPLACEMENT(matchobj):
    try:
        return CHARACTERS_TO_ENTITIES[matchobj.group(0)]
    except KeyError:
        return '&#{0};'.format(ord(matchobj.group(0)))


ENTITIES_RE = re.compile(
    r'&(?:#x([0-9A-F]+)|#([0-9]+)|([A-Z][A-Z0-9]+));',
    re.IGNORECASE,
)
ENTITIES_TO_CHARACTERS = {
    'Agrave': 'À',
    'Aacute': 'Á',
    'Acirc': 'Â',
    'Atilde': 'Ã',
    'Auml': 'Ä',
    'Aring': 'Å',
    'AElig': 'Æ',
    'Ccedil': 'Ç',
    'Egrave': 'È',
    'Eacute': 'É',
    'Ecirc': 'Ê',
    'Euml': 'Ë',
    'Igrave': 'Ì',
    'Iacute': 'Í',
    'Icirc': 'Î',
    'Iuml': 'Ï',
    'ETH': 'Ð',
    'Ntilde': 'Ñ',
    'Ograve': 'Ò',
    'Oacute': 'Ó',
    'Ocirc': 'Ô',
    'Otilde': 'Õ',
    'Ouml': 'Ö',
    'Oslash': 'Ø',
    'Ugrave': 'Ù',
    'Uacute': 'Ú',
    'Ucirc': 'Û',
    'Uuml': 'Ü',
    'Yacute': 'Ý',
    'THORN': 'Þ',
    'szlig': 'ß',
    'agrave': 'à',
    'aacute': 'á',
    'acirc': 'â',
    'atilde': 'ã',
    'auml': 'ä',
    'aring': 'å',
    'aelig': 'æ',
    'ccedil': 'ç',
    'egrave': 'è',
    'eacute': 'é',
    'ecirc': 'ê',
    'euml': 'ë',
    'igrave': 'ì',
    'iacute': 'í',
    'icirc': 'î',
    'iuml': 'ï',
    'eth': 'ð',
    'ntilde': 'ñ',
    'ograve': 'ò',
    'oacute': 'ó',
    'ocirc': 'ô',
    'otilde': 'õ',
    'ouml': 'ö',
    'oslash': 'ø',
    'ugrave': 'ù',
    'uacute': 'ú',
    'ucirc': 'û',
    'uuml': 'ü',
    'yacute': 'ý',
    'thorn': 'þ',
    'yuml': 'ÿ',
    'OElig': 'Œ',
    'oelig': 'œ',
    'Scaron': 'Š',
    'scaron': 'š',
    'Yuml': 'Ÿ',
    'Alpha': 'Α',
    'Beta': 'Β',
    'Gamma': 'Γ',
    'Delta': 'Δ',
    'Epsilon': 'Ε',
    'Zeta': 'Ζ',
    'Eta': 'Η',
    'Theta': 'Θ',
    'Iota': 'Ι',
    'Kappa': 'Κ',
    'Lambda': 'Λ',
    'Mu': 'Μ',
    'Nu': 'Ν',
    'Xi': 'Ξ',
    'Omicron': 'Ο',
    'Pi': 'Π',
    'Rho': 'Ρ',
    'Sigma': 'Σ',
    'Tau': 'Τ',
    'Upsilon': 'Υ',
    'Phi': 'Φ',
    'Chi': 'Χ',
    'Psi': 'Ψ',
    'Omega': 'Ω',
    'alpha': 'α',
    'beta': 'β',
    'gamma': 'γ',
    'delta': 'δ',
    'epsilon': 'ε',
    'zeta': 'ζ',
    'eta': 'η',
    'theta': 'θ',
    'iota': 'ι',
    'kappa': 'κ',
    'lambda': 'λ',
    'mu': 'μ',
    'nu': 'ν',
    'xi': 'ξ',
    'omicron': 'ο',
    'pi': 'π',
    'rho': 'ρ',
    'sigmaf': 'ς',
    'sigma': 'σ',
    'tau': 'τ',
    'upsilon': 'υ',
    'phi': 'φ',
    'chi': 'χ',
    'psi': 'ψ',
    'omega': 'ω',
    'thetasym': 'ϑ',
    'upsih': 'ϒ',
    'piv': 'ϖ',
    'iexcl': '¡',
    'amp': '&',
    'cent': '¢',
    'pound': '£',
    'curren': '¤',
    'yen': '¥',
    'brvbar': '¦',
    'sect': '§',
    'uml': '¨',
    'copy': '©',
    'ordf': 'ª',
    'laquo': '«',
    'not': '¬',
    'reg': '®',
    'macr': '¯',
    'deg': '°',
    'plusmn': '±',
    'sup2': '²',
    'sup3': '³',
    'acute': '´',
    'micro': 'µ',
    'para': '¶',
    'middot': '·',
    'cedil': '¸',
    'sup1': '¹',
    'ordm': 'º',
    'raquo': '»',
    'frac14': '¼',
    'frac12': '½',
    'frac34': '¾',
    'iquest': '¿',
    'times': '×',
    'divide': '÷',
    'fnof': 'ƒ',
    'circ': 'ˆ',
    'tilde': '˜',
    'ndash': '–',
    'mdash': '—',
    'lsquo': '‘',
    'rsquo': '’',
    'sbquo': '‚',
    'ldquo': '“',
    'rdquo': '”',
    'bdquo': '„',
    'dagger': '†',
    'Dagger': '‡',
    'bull': '•',
    'hellip': '…',
    'permil': '‰',
    'prime': '′',
    'Prime': '″',
    'lsaquo': '‹',
    'rsaquo': '›',
    'oline': '‾',
    'frasl': '⁄',
    'euro': '€',
    'image': 'ℑ',
    'weierp': '℘',
    'real': 'ℜ',
    'trade': '™',
    'alefsym': 'ℵ',
    'larr': '←',
    'uarr': '↑',
    'rarr': '→',
    'darr': '↓',
    'harr': '↔',
    'crarr': '↵',
    'lArr': '⇐',
    'uArr': '⇑',
    'rArr': '⇒',
    'dArr': '⇓',
    'hArr': '⇔',
    'forall': '∀',
    'part': '∂',
    'exist': '∃',
    'empty': '∅',
    'nabla': '∇',
    'isin': '∈',
    'notin': '∉',
    'ni': '∋',
    'prod': '∏',
    'sum': '∑',
    'minus': '−',
    'lowast': '∗',
    'radic': '√',
    'prop': '∝',
    'infin': '∞',
    'ang': '∠',
    'and': '∧',
    'or': '∨',
    'cap': '∩',
    'cup': '∪',
    'int': '∫',
    'there4': '∴',
    'sim': '∼',
    'cong': '≅',
    'asymp': '≈',
    'ne': '≠',
    'equiv': '≡',
    'le': '≤',
    'lt': '<',
    'ge': '≥',
    'gt': '>',
    'sub': '⊂',
    'sup': '⊃',
    'nsub': '⊄',
    'sube': '⊆',
    'supe': '⊇',
    'oplus': '⊕',
    'otimes': '⊗',
    'perp': '⊥',
    'sdot': '⋅',
    'lceil': '⌈',
    'rceil': '⌉',
    'lfloor': '⌊',
    'rfloor': '⌋',
    'lang': '〈',
    'rang': '〉',
    'loz': '◊',
    'spades': '♠',
    'clubs': '♣',
    'hearts': '♥',
    'diams': '♦',
}
def ENTITIES_REPLACEMENT(matchobj):
    if matchobj.group(1):
        return chr(int(matchobj.group(1), 16))
    if matchobj.group(2):
        return chr(int(matchobj.group(2)))
    try:
        return ENTITIES_TO_CHARACTERS[matchobj.group(3)]
    except KeyError:
        return matchobj.group(0)


def decode(string):
    """
    Turns all HTML entities into their applicable characters.
    """
    return ENTITIES_RE.sub(ENTITIES_REPLACEMENT, force_text(string))


def encode(string):
    """
    Turns all applicable characters into HTML entities.
    """
    return CHARACTERS_RE.sub(CHARACTERS_REPLACEMENT, force_text(string))

